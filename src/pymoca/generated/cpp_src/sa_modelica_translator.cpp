/*
 * This file was auto-generated by speedy-antlr-tool v1.3.1
 *  https://github.com/amykyta3/speedy-antlr-tool
 */

#include "sa_modelica_translator.h"


SA_ModelicaTranslator::SA_ModelicaTranslator(speedy_antlr::Translator *translator) {
    this->translator = translator;
}

SA_ModelicaTranslator::~SA_ModelicaTranslator() {
    Py_XDECREF(Stored_definitionContext_cls);
    Py_XDECREF(Stored_definition_classContext_cls);
    Py_XDECREF(Class_definitionContext_cls);
    Py_XDECREF(Class_prefixesContext_cls);
    Py_XDECREF(Class_typeContext_cls);
    Py_XDECREF(Class_spec_derContext_cls);
    Py_XDECREF(Class_spec_enumContext_cls);
    Py_XDECREF(Class_spec_baseContext_cls);
    Py_XDECREF(Class_spec_compContext_cls);
    Py_XDECREF(Class_spec_extendsContext_cls);
    Py_XDECREF(Base_prefixContext_cls);
    Py_XDECREF(Enum_listContext_cls);
    Py_XDECREF(Enumeration_literalContext_cls);
    Py_XDECREF(CompositionContext_cls);
    Py_XDECREF(Language_specificationContext_cls);
    Py_XDECREF(External_function_callContext_cls);
    Py_XDECREF(Element_listContext_cls);
    Py_XDECREF(ElementContext_cls);
    Py_XDECREF(Regular_elementContext_cls);
    Py_XDECREF(Replaceable_elementContext_cls);
    Py_XDECREF(Import_clauseContext_cls);
    Py_XDECREF(Import_listContext_cls);
    Py_XDECREF(Extends_clauseContext_cls);
    Py_XDECREF(Constraining_clauseContext_cls);
    Py_XDECREF(Component_clauseContext_cls);
    Py_XDECREF(Type_prefixContext_cls);
    Py_XDECREF(Type_specifier_elementContext_cls);
    Py_XDECREF(Type_specifierContext_cls);
    Py_XDECREF(Component_listContext_cls);
    Py_XDECREF(Component_declarationContext_cls);
    Py_XDECREF(Condition_attributeContext_cls);
    Py_XDECREF(DeclarationContext_cls);
    Py_XDECREF(Modification_classContext_cls);
    Py_XDECREF(Modification_assignment2Context_cls);
    Py_XDECREF(Modification_assignmentContext_cls);
    Py_XDECREF(Class_modificationContext_cls);
    Py_XDECREF(Argument_listContext_cls);
    Py_XDECREF(ArgumentContext_cls);
    Py_XDECREF(Element_modification_or_replaceableContext_cls);
    Py_XDECREF(Element_modificationContext_cls);
    Py_XDECREF(Element_redeclarationContext_cls);
    Py_XDECREF(Element_replaceableContext_cls);
    Py_XDECREF(Component_clause1Context_cls);
    Py_XDECREF(Component_declaration1Context_cls);
    Py_XDECREF(Short_class_definitionContext_cls);
    Py_XDECREF(Equation_blockContext_cls);
    Py_XDECREF(Equation_sectionContext_cls);
    Py_XDECREF(Statement_blockContext_cls);
    Py_XDECREF(Algorithm_sectionContext_cls);
    Py_XDECREF(Equation_whenContext_cls);
    Py_XDECREF(Equation_connect_clauseContext_cls);
    Py_XDECREF(Equation_forContext_cls);
    Py_XDECREF(Equation_functionContext_cls);
    Py_XDECREF(Equation_simpleContext_cls);
    Py_XDECREF(Equation_ifContext_cls);
    Py_XDECREF(EquationContext_cls);
    Py_XDECREF(Statement_breakContext_cls);
    Py_XDECREF(Statement_whileContext_cls);
    Py_XDECREF(Statement_component_functionContext_cls);
    Py_XDECREF(Statement_returnContext_cls);
    Py_XDECREF(Statement_forContext_cls);
    Py_XDECREF(Statement_whenContext_cls);
    Py_XDECREF(Statement_ifContext_cls);
    Py_XDECREF(Statement_component_referenceContext_cls);
    Py_XDECREF(StatementContext_cls);
    Py_XDECREF(If_equationContext_cls);
    Py_XDECREF(If_statementContext_cls);
    Py_XDECREF(For_equationContext_cls);
    Py_XDECREF(For_statementContext_cls);
    Py_XDECREF(For_indicesContext_cls);
    Py_XDECREF(For_indexContext_cls);
    Py_XDECREF(While_statementContext_cls);
    Py_XDECREF(When_equationContext_cls);
    Py_XDECREF(When_statementContext_cls);
    Py_XDECREF(Connect_clauseContext_cls);
    Py_XDECREF(Expression_ifContext_cls);
    Py_XDECREF(Expression_simpleContext_cls);
    Py_XDECREF(Simple_expressionContext_cls);
    Py_XDECREF(Expr_addContext_cls);
    Py_XDECREF(Expr_signedContext_cls);
    Py_XDECREF(Expr_expContext_cls);
    Py_XDECREF(Expr_orContext_cls);
    Py_XDECREF(Expr_primaryContext_cls);
    Py_XDECREF(Expr_andContext_cls);
    Py_XDECREF(Expr_relContext_cls);
    Py_XDECREF(Expr_notContext_cls);
    Py_XDECREF(Expr_mulContext_cls);
    Py_XDECREF(Primary_stringContext_cls);
    Py_XDECREF(Primary_endContext_cls);
    Py_XDECREF(Primary_output_expression_listContext_cls);
    Py_XDECREF(Primary_unsigned_numberContext_cls);
    Py_XDECREF(Primary_function_argumentsContext_cls);
    Py_XDECREF(Primary_falseContext_cls);
    Py_XDECREF(Primary_derivativeContext_cls);
    Py_XDECREF(Primary_component_referenceContext_cls);
    Py_XDECREF(Primary_expression_listContext_cls);
    Py_XDECREF(Primary_trueContext_cls);
    Py_XDECREF(Primary_functionContext_cls);
    Py_XDECREF(Primary_initialContext_cls);
    Py_XDECREF(NameContext_cls);
    Py_XDECREF(Component_reference_elementContext_cls);
    Py_XDECREF(Component_referenceContext_cls);
    Py_XDECREF(Function_call_argsContext_cls);
    Py_XDECREF(Function_argumentsContext_cls);
    Py_XDECREF(Named_argumentsContext_cls);
    Py_XDECREF(Named_argumentContext_cls);
    Py_XDECREF(Argument_expressionContext_cls);
    Py_XDECREF(Argument_functionContext_cls);
    Py_XDECREF(Output_expression_listContext_cls);
    Py_XDECREF(Expression_listContext_cls);
    Py_XDECREF(Array_subscriptsContext_cls);
    Py_XDECREF(SubscriptContext_cls);
    Py_XDECREF(CommentContext_cls);
    Py_XDECREF(String_commentContext_cls);
    Py_XDECREF(AnnotationContext_cls);
}


antlrcpp::Any SA_ModelicaTranslator::visitStored_definition(ModelicaParser::Stored_definitionContext *ctx){
    if(!Stored_definitionContext_cls) Stored_definitionContext_cls = PyObject_GetAttrString(translator->parser_cls, "Stored_definitionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Stored_definitionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitStored_definition_class(ModelicaParser::Stored_definition_classContext *ctx){
    if(!Stored_definition_classContext_cls) Stored_definition_classContext_cls = PyObject_GetAttrString(translator->parser_cls, "Stored_definition_classContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Stored_definition_classContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitClass_definition(ModelicaParser::Class_definitionContext *ctx){
    if(!Class_definitionContext_cls) Class_definitionContext_cls = PyObject_GetAttrString(translator->parser_cls, "Class_definitionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Class_definitionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitClass_prefixes(ModelicaParser::Class_prefixesContext *ctx){
    if(!Class_prefixesContext_cls) Class_prefixesContext_cls = PyObject_GetAttrString(translator->parser_cls, "Class_prefixesContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Class_prefixesContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitClass_type(ModelicaParser::Class_typeContext *ctx){
    if(!Class_typeContext_cls) Class_typeContext_cls = PyObject_GetAttrString(translator->parser_cls, "Class_typeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Class_typeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitClass_spec_der(ModelicaParser::Class_spec_derContext *ctx){
    if(!Class_spec_derContext_cls) Class_spec_derContext_cls = PyObject_GetAttrString(translator->parser_cls, "Class_spec_derContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Class_spec_derContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitClass_spec_enum(ModelicaParser::Class_spec_enumContext *ctx){
    if(!Class_spec_enumContext_cls) Class_spec_enumContext_cls = PyObject_GetAttrString(translator->parser_cls, "Class_spec_enumContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Class_spec_enumContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitClass_spec_base(ModelicaParser::Class_spec_baseContext *ctx){
    if(!Class_spec_baseContext_cls) Class_spec_baseContext_cls = PyObject_GetAttrString(translator->parser_cls, "Class_spec_baseContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Class_spec_baseContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitClass_spec_comp(ModelicaParser::Class_spec_compContext *ctx){
    if(!Class_spec_compContext_cls) Class_spec_compContext_cls = PyObject_GetAttrString(translator->parser_cls, "Class_spec_compContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Class_spec_compContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitClass_spec_extends(ModelicaParser::Class_spec_extendsContext *ctx){
    if(!Class_spec_extendsContext_cls) Class_spec_extendsContext_cls = PyObject_GetAttrString(translator->parser_cls, "Class_spec_extendsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Class_spec_extendsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitBase_prefix(ModelicaParser::Base_prefixContext *ctx){
    if(!Base_prefixContext_cls) Base_prefixContext_cls = PyObject_GetAttrString(translator->parser_cls, "Base_prefixContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Base_prefixContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitEnum_list(ModelicaParser::Enum_listContext *ctx){
    if(!Enum_listContext_cls) Enum_listContext_cls = PyObject_GetAttrString(translator->parser_cls, "Enum_listContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Enum_listContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitEnumeration_literal(ModelicaParser::Enumeration_literalContext *ctx){
    if(!Enumeration_literalContext_cls) Enumeration_literalContext_cls = PyObject_GetAttrString(translator->parser_cls, "Enumeration_literalContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Enumeration_literalContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitComposition(ModelicaParser::CompositionContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"epriv", static_cast<void*>(ctx->epriv)},
        {"epub", static_cast<void*>(ctx->epub)},
        {"epro", static_cast<void*>(ctx->epro)},
        {"ext_annotation", static_cast<void*>(ctx->ext_annotation)},
        {"comp_annotation", static_cast<void*>(ctx->comp_annotation)}
    };
    if(!CompositionContext_cls) CompositionContext_cls = PyObject_GetAttrString(translator->parser_cls, "CompositionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CompositionContext_cls, labels, 5);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitLanguage_specification(ModelicaParser::Language_specificationContext *ctx){
    if(!Language_specificationContext_cls) Language_specificationContext_cls = PyObject_GetAttrString(translator->parser_cls, "Language_specificationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Language_specificationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitExternal_function_call(ModelicaParser::External_function_callContext *ctx){
    if(!External_function_callContext_cls) External_function_callContext_cls = PyObject_GetAttrString(translator->parser_cls, "External_function_callContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, External_function_callContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitElement_list(ModelicaParser::Element_listContext *ctx){
    if(!Element_listContext_cls) Element_listContext_cls = PyObject_GetAttrString(translator->parser_cls, "Element_listContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Element_listContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitElement(ModelicaParser::ElementContext *ctx){
    if(!ElementContext_cls) ElementContext_cls = PyObject_GetAttrString(translator->parser_cls, "ElementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitRegular_element(ModelicaParser::Regular_elementContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"class_elem", static_cast<void*>(ctx->class_elem)},
        {"comp_elem", static_cast<void*>(ctx->comp_elem)}
    };
    if(!Regular_elementContext_cls) Regular_elementContext_cls = PyObject_GetAttrString(translator->parser_cls, "Regular_elementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Regular_elementContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitReplaceable_element(ModelicaParser::Replaceable_elementContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"class_elem", static_cast<void*>(ctx->class_elem)},
        {"comp_elem", static_cast<void*>(ctx->comp_elem)}
    };
    if(!Replaceable_elementContext_cls) Replaceable_elementContext_cls = PyObject_GetAttrString(translator->parser_cls, "Replaceable_elementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Replaceable_elementContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitImport_clause(ModelicaParser::Import_clauseContext *ctx){
    if(!Import_clauseContext_cls) Import_clauseContext_cls = PyObject_GetAttrString(translator->parser_cls, "Import_clauseContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Import_clauseContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitImport_list(ModelicaParser::Import_listContext *ctx){
    if(!Import_listContext_cls) Import_listContext_cls = PyObject_GetAttrString(translator->parser_cls, "Import_listContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Import_listContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitExtends_clause(ModelicaParser::Extends_clauseContext *ctx){
    if(!Extends_clauseContext_cls) Extends_clauseContext_cls = PyObject_GetAttrString(translator->parser_cls, "Extends_clauseContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Extends_clauseContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitConstraining_clause(ModelicaParser::Constraining_clauseContext *ctx){
    if(!Constraining_clauseContext_cls) Constraining_clauseContext_cls = PyObject_GetAttrString(translator->parser_cls, "Constraining_clauseContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Constraining_clauseContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitComponent_clause(ModelicaParser::Component_clauseContext *ctx){
    if(!Component_clauseContext_cls) Component_clauseContext_cls = PyObject_GetAttrString(translator->parser_cls, "Component_clauseContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Component_clauseContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitType_prefix(ModelicaParser::Type_prefixContext *ctx){
    if(!Type_prefixContext_cls) Type_prefixContext_cls = PyObject_GetAttrString(translator->parser_cls, "Type_prefixContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Type_prefixContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitType_specifier_element(ModelicaParser::Type_specifier_elementContext *ctx){
    if(!Type_specifier_elementContext_cls) Type_specifier_elementContext_cls = PyObject_GetAttrString(translator->parser_cls, "Type_specifier_elementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Type_specifier_elementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitType_specifier(ModelicaParser::Type_specifierContext *ctx){
    if(!Type_specifierContext_cls) Type_specifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "Type_specifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Type_specifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitComponent_list(ModelicaParser::Component_listContext *ctx){
    if(!Component_listContext_cls) Component_listContext_cls = PyObject_GetAttrString(translator->parser_cls, "Component_listContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Component_listContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitComponent_declaration(ModelicaParser::Component_declarationContext *ctx){
    if(!Component_declarationContext_cls) Component_declarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "Component_declarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Component_declarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitCondition_attribute(ModelicaParser::Condition_attributeContext *ctx){
    if(!Condition_attributeContext_cls) Condition_attributeContext_cls = PyObject_GetAttrString(translator->parser_cls, "Condition_attributeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Condition_attributeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitDeclaration(ModelicaParser::DeclarationContext *ctx){
    if(!DeclarationContext_cls) DeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "DeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitModification_class(ModelicaParser::Modification_classContext *ctx){
    if(!Modification_classContext_cls) Modification_classContext_cls = PyObject_GetAttrString(translator->parser_cls, "Modification_classContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Modification_classContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitModification_assignment2(ModelicaParser::Modification_assignment2Context *ctx){
    if(!Modification_assignment2Context_cls) Modification_assignment2Context_cls = PyObject_GetAttrString(translator->parser_cls, "Modification_assignment2Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Modification_assignment2Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitModification_assignment(ModelicaParser::Modification_assignmentContext *ctx){
    if(!Modification_assignmentContext_cls) Modification_assignmentContext_cls = PyObject_GetAttrString(translator->parser_cls, "Modification_assignmentContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Modification_assignmentContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitClass_modification(ModelicaParser::Class_modificationContext *ctx){
    if(!Class_modificationContext_cls) Class_modificationContext_cls = PyObject_GetAttrString(translator->parser_cls, "Class_modificationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Class_modificationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitArgument_list(ModelicaParser::Argument_listContext *ctx){
    if(!Argument_listContext_cls) Argument_listContext_cls = PyObject_GetAttrString(translator->parser_cls, "Argument_listContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Argument_listContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitArgument(ModelicaParser::ArgumentContext *ctx){
    if(!ArgumentContext_cls) ArgumentContext_cls = PyObject_GetAttrString(translator->parser_cls, "ArgumentContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ArgumentContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitElement_modification_or_replaceable(ModelicaParser::Element_modification_or_replaceableContext *ctx){
    if(!Element_modification_or_replaceableContext_cls) Element_modification_or_replaceableContext_cls = PyObject_GetAttrString(translator->parser_cls, "Element_modification_or_replaceableContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Element_modification_or_replaceableContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitElement_modification(ModelicaParser::Element_modificationContext *ctx){
    if(!Element_modificationContext_cls) Element_modificationContext_cls = PyObject_GetAttrString(translator->parser_cls, "Element_modificationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Element_modificationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitElement_redeclaration(ModelicaParser::Element_redeclarationContext *ctx){
    if(!Element_redeclarationContext_cls) Element_redeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "Element_redeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Element_redeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitElement_replaceable(ModelicaParser::Element_replaceableContext *ctx){
    if(!Element_replaceableContext_cls) Element_replaceableContext_cls = PyObject_GetAttrString(translator->parser_cls, "Element_replaceableContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Element_replaceableContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitComponent_clause1(ModelicaParser::Component_clause1Context *ctx){
    if(!Component_clause1Context_cls) Component_clause1Context_cls = PyObject_GetAttrString(translator->parser_cls, "Component_clause1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Component_clause1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitComponent_declaration1(ModelicaParser::Component_declaration1Context *ctx){
    if(!Component_declaration1Context_cls) Component_declaration1Context_cls = PyObject_GetAttrString(translator->parser_cls, "Component_declaration1Context");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Component_declaration1Context_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitShort_class_definition(ModelicaParser::Short_class_definitionContext *ctx){
    if(!Short_class_definitionContext_cls) Short_class_definitionContext_cls = PyObject_GetAttrString(translator->parser_cls, "Short_class_definitionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Short_class_definitionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitEquation_block(ModelicaParser::Equation_blockContext *ctx){
    if(!Equation_blockContext_cls) Equation_blockContext_cls = PyObject_GetAttrString(translator->parser_cls, "Equation_blockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Equation_blockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitEquation_section(ModelicaParser::Equation_sectionContext *ctx){
    if(!Equation_sectionContext_cls) Equation_sectionContext_cls = PyObject_GetAttrString(translator->parser_cls, "Equation_sectionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Equation_sectionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitStatement_block(ModelicaParser::Statement_blockContext *ctx){
    if(!Statement_blockContext_cls) Statement_blockContext_cls = PyObject_GetAttrString(translator->parser_cls, "Statement_blockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement_blockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitAlgorithm_section(ModelicaParser::Algorithm_sectionContext *ctx){
    if(!Algorithm_sectionContext_cls) Algorithm_sectionContext_cls = PyObject_GetAttrString(translator->parser_cls, "Algorithm_sectionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Algorithm_sectionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitEquation_when(ModelicaParser::Equation_whenContext *ctx){
    if(!Equation_whenContext_cls) Equation_whenContext_cls = PyObject_GetAttrString(translator->parser_cls, "Equation_whenContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Equation_whenContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitEquation_connect_clause(ModelicaParser::Equation_connect_clauseContext *ctx){
    if(!Equation_connect_clauseContext_cls) Equation_connect_clauseContext_cls = PyObject_GetAttrString(translator->parser_cls, "Equation_connect_clauseContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Equation_connect_clauseContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitEquation_for(ModelicaParser::Equation_forContext *ctx){
    if(!Equation_forContext_cls) Equation_forContext_cls = PyObject_GetAttrString(translator->parser_cls, "Equation_forContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Equation_forContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitEquation_function(ModelicaParser::Equation_functionContext *ctx){
    if(!Equation_functionContext_cls) Equation_functionContext_cls = PyObject_GetAttrString(translator->parser_cls, "Equation_functionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Equation_functionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitEquation_simple(ModelicaParser::Equation_simpleContext *ctx){
    if(!Equation_simpleContext_cls) Equation_simpleContext_cls = PyObject_GetAttrString(translator->parser_cls, "Equation_simpleContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Equation_simpleContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitEquation_if(ModelicaParser::Equation_ifContext *ctx){
    if(!Equation_ifContext_cls) Equation_ifContext_cls = PyObject_GetAttrString(translator->parser_cls, "Equation_ifContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Equation_ifContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitEquation(ModelicaParser::EquationContext *ctx){
    if(!EquationContext_cls) EquationContext_cls = PyObject_GetAttrString(translator->parser_cls, "EquationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EquationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitStatement_break(ModelicaParser::Statement_breakContext *ctx){
    if(!Statement_breakContext_cls) Statement_breakContext_cls = PyObject_GetAttrString(translator->parser_cls, "Statement_breakContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement_breakContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitStatement_while(ModelicaParser::Statement_whileContext *ctx){
    if(!Statement_whileContext_cls) Statement_whileContext_cls = PyObject_GetAttrString(translator->parser_cls, "Statement_whileContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement_whileContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitStatement_component_function(ModelicaParser::Statement_component_functionContext *ctx){
    if(!Statement_component_functionContext_cls) Statement_component_functionContext_cls = PyObject_GetAttrString(translator->parser_cls, "Statement_component_functionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement_component_functionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitStatement_return(ModelicaParser::Statement_returnContext *ctx){
    if(!Statement_returnContext_cls) Statement_returnContext_cls = PyObject_GetAttrString(translator->parser_cls, "Statement_returnContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement_returnContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitStatement_for(ModelicaParser::Statement_forContext *ctx){
    if(!Statement_forContext_cls) Statement_forContext_cls = PyObject_GetAttrString(translator->parser_cls, "Statement_forContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement_forContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitStatement_when(ModelicaParser::Statement_whenContext *ctx){
    if(!Statement_whenContext_cls) Statement_whenContext_cls = PyObject_GetAttrString(translator->parser_cls, "Statement_whenContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement_whenContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitStatement_if(ModelicaParser::Statement_ifContext *ctx){
    if(!Statement_ifContext_cls) Statement_ifContext_cls = PyObject_GetAttrString(translator->parser_cls, "Statement_ifContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement_ifContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitStatement_component_reference(ModelicaParser::Statement_component_referenceContext *ctx){
    if(!Statement_component_referenceContext_cls) Statement_component_referenceContext_cls = PyObject_GetAttrString(translator->parser_cls, "Statement_component_referenceContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Statement_component_referenceContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitStatement(ModelicaParser::StatementContext *ctx){
    if(!StatementContext_cls) StatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "StatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, StatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitIf_equation(ModelicaParser::If_equationContext *ctx){
    speedy_antlr::ListLabelMap list_labels[] = {
        {"conditions", static_cast<void *>(ctx->conditions.data()), ctx->conditions.size()},
        {"blocks", static_cast<void *>(ctx->blocks.data()), ctx->blocks.size()}
    };
    if(!If_equationContext_cls) If_equationContext_cls = PyObject_GetAttrString(translator->parser_cls, "If_equationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, If_equationContext_cls, NULL, 0, list_labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitIf_statement(ModelicaParser::If_statementContext *ctx){
    speedy_antlr::ListLabelMap list_labels[] = {
        {"conditions", static_cast<void *>(ctx->conditions.data()), ctx->conditions.size()},
        {"blocks", static_cast<void *>(ctx->blocks.data()), ctx->blocks.size()}
    };
    if(!If_statementContext_cls) If_statementContext_cls = PyObject_GetAttrString(translator->parser_cls, "If_statementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, If_statementContext_cls, NULL, 0, list_labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitFor_equation(ModelicaParser::For_equationContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"indices", static_cast<void*>(ctx->indices)},
        {"block", static_cast<void*>(ctx->block)}
    };
    if(!For_equationContext_cls) For_equationContext_cls = PyObject_GetAttrString(translator->parser_cls, "For_equationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, For_equationContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitFor_statement(ModelicaParser::For_statementContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"indices", static_cast<void*>(ctx->indices)},
        {"block", static_cast<void*>(ctx->block)}
    };
    if(!For_statementContext_cls) For_statementContext_cls = PyObject_GetAttrString(translator->parser_cls, "For_statementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, For_statementContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitFor_indices(ModelicaParser::For_indicesContext *ctx){
    if(!For_indicesContext_cls) For_indicesContext_cls = PyObject_GetAttrString(translator->parser_cls, "For_indicesContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, For_indicesContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitFor_index(ModelicaParser::For_indexContext *ctx){
    if(!For_indexContext_cls) For_indexContext_cls = PyObject_GetAttrString(translator->parser_cls, "For_indexContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, For_indexContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitWhile_statement(ModelicaParser::While_statementContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"condition", static_cast<void*>(ctx->condition)},
        {"block", static_cast<void*>(ctx->block)}
    };
    if(!While_statementContext_cls) While_statementContext_cls = PyObject_GetAttrString(translator->parser_cls, "While_statementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, While_statementContext_cls, labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitWhen_equation(ModelicaParser::When_equationContext *ctx){
    speedy_antlr::ListLabelMap list_labels[] = {
        {"conditions", static_cast<void *>(ctx->conditions.data()), ctx->conditions.size()},
        {"blocks", static_cast<void *>(ctx->blocks.data()), ctx->blocks.size()}
    };
    if(!When_equationContext_cls) When_equationContext_cls = PyObject_GetAttrString(translator->parser_cls, "When_equationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, When_equationContext_cls, NULL, 0, list_labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitWhen_statement(ModelicaParser::When_statementContext *ctx){
    speedy_antlr::ListLabelMap list_labels[] = {
        {"conditions", static_cast<void *>(ctx->conditions.data()), ctx->conditions.size()},
        {"blocks", static_cast<void *>(ctx->blocks.data()), ctx->blocks.size()}
    };
    if(!When_statementContext_cls) When_statementContext_cls = PyObject_GetAttrString(translator->parser_cls, "When_statementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, When_statementContext_cls, NULL, 0, list_labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitConnect_clause(ModelicaParser::Connect_clauseContext *ctx){
    if(!Connect_clauseContext_cls) Connect_clauseContext_cls = PyObject_GetAttrString(translator->parser_cls, "Connect_clauseContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Connect_clauseContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitExpression_if(ModelicaParser::Expression_ifContext *ctx){
    speedy_antlr::ListLabelMap list_labels[] = {
        {"conditions", static_cast<void *>(ctx->conditions.data()), ctx->conditions.size()},
        {"blocks", static_cast<void *>(ctx->blocks.data()), ctx->blocks.size()}
    };
    if(!Expression_ifContext_cls) Expression_ifContext_cls = PyObject_GetAttrString(translator->parser_cls, "Expression_ifContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression_ifContext_cls, NULL, 0, list_labels, 2);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitExpression_simple(ModelicaParser::Expression_simpleContext *ctx){
    if(!Expression_simpleContext_cls) Expression_simpleContext_cls = PyObject_GetAttrString(translator->parser_cls, "Expression_simpleContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression_simpleContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitSimple_expression(ModelicaParser::Simple_expressionContext *ctx){
    if(!Simple_expressionContext_cls) Simple_expressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "Simple_expressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Simple_expressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitExpr_add(ModelicaParser::Expr_addContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"op", static_cast<void*>(ctx->op)}
    };
    if(!Expr_addContext_cls) Expr_addContext_cls = PyObject_GetAttrString(translator->parser_cls, "Expr_addContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expr_addContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitExpr_signed(ModelicaParser::Expr_signedContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"op", static_cast<void*>(ctx->op)}
    };
    if(!Expr_signedContext_cls) Expr_signedContext_cls = PyObject_GetAttrString(translator->parser_cls, "Expr_signedContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expr_signedContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitExpr_exp(ModelicaParser::Expr_expContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"op", static_cast<void*>(ctx->op)}
    };
    if(!Expr_expContext_cls) Expr_expContext_cls = PyObject_GetAttrString(translator->parser_cls, "Expr_expContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expr_expContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitExpr_or(ModelicaParser::Expr_orContext *ctx){
    if(!Expr_orContext_cls) Expr_orContext_cls = PyObject_GetAttrString(translator->parser_cls, "Expr_orContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expr_orContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitExpr_primary(ModelicaParser::Expr_primaryContext *ctx){
    if(!Expr_primaryContext_cls) Expr_primaryContext_cls = PyObject_GetAttrString(translator->parser_cls, "Expr_primaryContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expr_primaryContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitExpr_and(ModelicaParser::Expr_andContext *ctx){
    if(!Expr_andContext_cls) Expr_andContext_cls = PyObject_GetAttrString(translator->parser_cls, "Expr_andContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expr_andContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitExpr_rel(ModelicaParser::Expr_relContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"op", static_cast<void*>(ctx->op)}
    };
    if(!Expr_relContext_cls) Expr_relContext_cls = PyObject_GetAttrString(translator->parser_cls, "Expr_relContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expr_relContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitExpr_not(ModelicaParser::Expr_notContext *ctx){
    if(!Expr_notContext_cls) Expr_notContext_cls = PyObject_GetAttrString(translator->parser_cls, "Expr_notContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expr_notContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitExpr_mul(ModelicaParser::Expr_mulContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"op", static_cast<void*>(ctx->op)}
    };
    if(!Expr_mulContext_cls) Expr_mulContext_cls = PyObject_GetAttrString(translator->parser_cls, "Expr_mulContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expr_mulContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitPrimary_string(ModelicaParser::Primary_stringContext *ctx){
    if(!Primary_stringContext_cls) Primary_stringContext_cls = PyObject_GetAttrString(translator->parser_cls, "Primary_stringContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary_stringContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitPrimary_end(ModelicaParser::Primary_endContext *ctx){
    if(!Primary_endContext_cls) Primary_endContext_cls = PyObject_GetAttrString(translator->parser_cls, "Primary_endContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary_endContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitPrimary_output_expression_list(ModelicaParser::Primary_output_expression_listContext *ctx){
    if(!Primary_output_expression_listContext_cls) Primary_output_expression_listContext_cls = PyObject_GetAttrString(translator->parser_cls, "Primary_output_expression_listContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary_output_expression_listContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitPrimary_unsigned_number(ModelicaParser::Primary_unsigned_numberContext *ctx){
    if(!Primary_unsigned_numberContext_cls) Primary_unsigned_numberContext_cls = PyObject_GetAttrString(translator->parser_cls, "Primary_unsigned_numberContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary_unsigned_numberContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitPrimary_function_arguments(ModelicaParser::Primary_function_argumentsContext *ctx){
    if(!Primary_function_argumentsContext_cls) Primary_function_argumentsContext_cls = PyObject_GetAttrString(translator->parser_cls, "Primary_function_argumentsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary_function_argumentsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitPrimary_false(ModelicaParser::Primary_falseContext *ctx){
    if(!Primary_falseContext_cls) Primary_falseContext_cls = PyObject_GetAttrString(translator->parser_cls, "Primary_falseContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary_falseContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitPrimary_derivative(ModelicaParser::Primary_derivativeContext *ctx){
    if(!Primary_derivativeContext_cls) Primary_derivativeContext_cls = PyObject_GetAttrString(translator->parser_cls, "Primary_derivativeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary_derivativeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitPrimary_component_reference(ModelicaParser::Primary_component_referenceContext *ctx){
    if(!Primary_component_referenceContext_cls) Primary_component_referenceContext_cls = PyObject_GetAttrString(translator->parser_cls, "Primary_component_referenceContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary_component_referenceContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitPrimary_expression_list(ModelicaParser::Primary_expression_listContext *ctx){
    if(!Primary_expression_listContext_cls) Primary_expression_listContext_cls = PyObject_GetAttrString(translator->parser_cls, "Primary_expression_listContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary_expression_listContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitPrimary_true(ModelicaParser::Primary_trueContext *ctx){
    if(!Primary_trueContext_cls) Primary_trueContext_cls = PyObject_GetAttrString(translator->parser_cls, "Primary_trueContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary_trueContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitPrimary_function(ModelicaParser::Primary_functionContext *ctx){
    if(!Primary_functionContext_cls) Primary_functionContext_cls = PyObject_GetAttrString(translator->parser_cls, "Primary_functionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary_functionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitPrimary_initial(ModelicaParser::Primary_initialContext *ctx){
    if(!Primary_initialContext_cls) Primary_initialContext_cls = PyObject_GetAttrString(translator->parser_cls, "Primary_initialContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Primary_initialContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitName(ModelicaParser::NameContext *ctx){
    if(!NameContext_cls) NameContext_cls = PyObject_GetAttrString(translator->parser_cls, "NameContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NameContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitComponent_reference_element(ModelicaParser::Component_reference_elementContext *ctx){
    if(!Component_reference_elementContext_cls) Component_reference_elementContext_cls = PyObject_GetAttrString(translator->parser_cls, "Component_reference_elementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Component_reference_elementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitComponent_reference(ModelicaParser::Component_referenceContext *ctx){
    if(!Component_referenceContext_cls) Component_referenceContext_cls = PyObject_GetAttrString(translator->parser_cls, "Component_referenceContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Component_referenceContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitFunction_call_args(ModelicaParser::Function_call_argsContext *ctx){
    if(!Function_call_argsContext_cls) Function_call_argsContext_cls = PyObject_GetAttrString(translator->parser_cls, "Function_call_argsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Function_call_argsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitFunction_arguments(ModelicaParser::Function_argumentsContext *ctx){
    if(!Function_argumentsContext_cls) Function_argumentsContext_cls = PyObject_GetAttrString(translator->parser_cls, "Function_argumentsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Function_argumentsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitNamed_arguments(ModelicaParser::Named_argumentsContext *ctx){
    if(!Named_argumentsContext_cls) Named_argumentsContext_cls = PyObject_GetAttrString(translator->parser_cls, "Named_argumentsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Named_argumentsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitNamed_argument(ModelicaParser::Named_argumentContext *ctx){
    if(!Named_argumentContext_cls) Named_argumentContext_cls = PyObject_GetAttrString(translator->parser_cls, "Named_argumentContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Named_argumentContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitArgument_expression(ModelicaParser::Argument_expressionContext *ctx){
    if(!Argument_expressionContext_cls) Argument_expressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "Argument_expressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Argument_expressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitArgument_function(ModelicaParser::Argument_functionContext *ctx){
    if(!Argument_functionContext_cls) Argument_functionContext_cls = PyObject_GetAttrString(translator->parser_cls, "Argument_functionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Argument_functionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitOutput_expression_list(ModelicaParser::Output_expression_listContext *ctx){
    if(!Output_expression_listContext_cls) Output_expression_listContext_cls = PyObject_GetAttrString(translator->parser_cls, "Output_expression_listContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Output_expression_listContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitExpression_list(ModelicaParser::Expression_listContext *ctx){
    if(!Expression_listContext_cls) Expression_listContext_cls = PyObject_GetAttrString(translator->parser_cls, "Expression_listContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Expression_listContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitArray_subscripts(ModelicaParser::Array_subscriptsContext *ctx){
    if(!Array_subscriptsContext_cls) Array_subscriptsContext_cls = PyObject_GetAttrString(translator->parser_cls, "Array_subscriptsContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, Array_subscriptsContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitSubscript(ModelicaParser::SubscriptContext *ctx){
    if(!SubscriptContext_cls) SubscriptContext_cls = PyObject_GetAttrString(translator->parser_cls, "SubscriptContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SubscriptContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitComment(ModelicaParser::CommentContext *ctx){
    if(!CommentContext_cls) CommentContext_cls = PyObject_GetAttrString(translator->parser_cls, "CommentContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CommentContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitString_comment(ModelicaParser::String_commentContext *ctx){
    if(!String_commentContext_cls) String_commentContext_cls = PyObject_GetAttrString(translator->parser_cls, "String_commentContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, String_commentContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_ModelicaTranslator::visitAnnotation(ModelicaParser::AnnotationContext *ctx){
    if(!AnnotationContext_cls) AnnotationContext_cls = PyObject_GetAttrString(translator->parser_cls, "AnnotationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AnnotationContext_cls);
    return py_ctx;
}
